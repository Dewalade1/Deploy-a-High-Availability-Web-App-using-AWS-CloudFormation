Description: >
  Dewalade Ade-Onojobi/ Deploy Servers for the "High-Availability Web App using CloudFormation" Project
 
  This template deploys a VPC, with a pair of public and private subnets in an AZ. 
  It deploys an Internet Gateway, with a default route on the public subnets. 
  It deploys a NAT Gateway in one AZ, and default routes for them in the private subnet.



Parameters:
  EnvName:
      Description: Name of the cloudformation environment. It will be prefixed to resource names
      Type: String

  AMIinstanceId:
      Description: AMI instance image to run on server
      Type: String

  WebServerKeyPair:
      Description: Secure Key Pair for Accessing Web Server
      Type: String

  WebServerS3BucketRole:
      Description: Instance role for the Web Server to access S3 buckets
      Type: String

  WebServerInstanceType:
      Description: Instance type for the Web Server AMI
      Type: String

Resources:
  # SECURITY GROUPS
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer security group. Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0


  WebAppServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp #SSH port (delete)
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 30.0.0.0/16

  # AUTOSCALING GROUPS
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          apt-get install unzip awscli -y
          systemctl enable httpd
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://s3://my-udagram-project-bucket/udagram-website.zip . 
          unzip -o udagram-website.zip  
      ImageId: !Sub ${AMIinstanceId}
      KeyName: !Sub ${WebServerKeyPair}
      SecurityGroups:
      - Ref: WebAppServerSecGroup
      InstanceType: !Sub "${WebServerInstanceType}"
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '15'
          
  WebAppAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  # S3 Bucket
  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${EnvName}-WebSite-S3-Bucket-Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:Get*
              - s3:List*
            Resource: "*"
      Roles:
        - Ref: WebServerS3BucketRole

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles:
        - Ref: WebServerS3BucketRole

  # LOAD_BALANCERS
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvName}-PRIV1-SN"
      - Fn::ImportValue: !Sub "${EnvName}-PRIV2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [ / ]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 6
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvName}-VPCID"

Outputs: 
    AutoScalingGroup:
        Description: Public Servers AutoScalingGroup
        Value: !Ref WebAppAutoScaleGroup
        Export:
          Name: !Sub ${EnvName}-Public-Servers-AutoScalingGroup

    LoadBalancerDNSName: 
        Description: DNS Name of the Load Balancer
        Value: 
          Fn::GetAtt: ["WebAppLB", "DNSName"]
        Export:
          Name: !Sub ${EnvName}-Load-Balancer-DNS-Name

    WebAppURL:
        Description: URL of the Udagram Web App
        Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
        Export:
          Name: !Sub "${EnvName}-WebApp-URL"

    WebAppLB:
        Description: Wepp App LoadBalancer
        Value: !Ref WebAppLB
        Export:
          Name: !Sub ${EnvName}-Public-Servers-LoadBalancer

